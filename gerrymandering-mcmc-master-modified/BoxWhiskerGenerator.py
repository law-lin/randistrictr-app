import os
import json
import pandas as pd

NUM_DISTRICTS = 8  # Maryland: 8 districts, meaning 8 box plots

class BoxWhiskerGenerator:
    def __init__(self):
        self.path = r'box_whisker'

        # These lists encompass all the districting plans
        self.agg_black_pops = []
        self.agg_hispanic_pops = []
        self.agg_american_indian_pops = []
        self.agg_asian_pops = []
        self.agg_hawaiian_pops = []
        self.agg_other_pops = []

        self.agg_vap_black_pops = []
        self.agg_vap_hispanic_pops = []
        self.agg_vap_american_indian_pops = []
        self.agg_vap_asian_pops = []
        self.agg_vap_hawaiian_pops = []
        self.agg_vap_other_pops = []

        self.agg_cvap_black_pops = []
        self.agg_cvap_hispanic_pops = []
        self.agg_cvap_american_indian_pops = []
        self.agg_cvap_asian_pops = []
        self.agg_cvap_hawaiian_pops = []
        self.agg_cvap_other_pops = []

        self.agg_democrat_pops = []
        self.agg_republican_pops = []

    def __aggregate_populations(self, file_path):
        """
        aggregates minorities/and political populations into aggregated lists
        """
        # key = minority population, value = processes' generated districting plans minority pops
        minority_dict = json.load(open(file_path))
        self.agg_black_pops += minority_dict['black_pop']
        self.agg_hispanic_pops += minority_dict['hispanic_pop']
        self.agg_american_indian_pops += minority_dict['american_indian_pop']
        self.agg_asian_pops += minority_dict['asian_pop']
        self.agg_hawaiian_pops += minority_dict['hawaiian_pop']
        self.agg_other_pops += minority_dict['other_pop']

        self.agg_vap_black_pops += minority_dict['vap_black']
        self.agg_vap_hispanic_pops += minority_dict['vap_hispanic']
        self.agg_vap_american_indian_pops += minority_dict['vap_american_indian']
        self.agg_vap_asian_pops += minority_dict['vap_asian']
        self.agg_vap_hawaiian_pops += minority_dict['vap_hawaiian']
        self.agg_vap_other_pops += minority_dict['vap_other']

        self.agg_cvap_black_pops += minority_dict['cvap_black']
        self.agg_cvap_hispanic_pops += minority_dict['cvap_hispanic']
        self.agg_cvap_american_indian_pops += minority_dict['cvap_american_indian']
        self.agg_cvap_asian_pops += minority_dict['cvap_asian']
        self.agg_cvap_hawaiian_pops += minority_dict['cvap_hawaiian']
        self.agg_cvap_other_pops += minority_dict['cvap_other']

        self.agg_democrat_pops += minority_dict['democrat_voting']
        self.agg_republican_pops += minority_dict['republican_voting']

    def __calculate_box_data(self, agg_list):
        """
        For a specific minority/political party,
        generate the min, 25th, 50th, 75th, and max that makes up a box plot.
        This is done for each district in districting plan.
        """
        # TODO: Utah has 4 districts, change for other states
        box_whisker_dataframe = pd.DataFrame({
            0: [sorted_districts[0] for sorted_districts in agg_list],
            1: [sorted_districts[1] for sorted_districts in agg_list],
            2: [sorted_districts[2] for sorted_districts in agg_list],
            3: [sorted_districts[3] for sorted_districts in agg_list]
        })
        # indexed by position in list i.e. 0th index represents 1st box plot in box whisker plot
        box_whisker_data = []
        for index in range(4):
            box_plot_data = [int(box_whisker_dataframe[index].min()),
                             int(box_whisker_dataframe[index].quantile(0.25)),
                             int(box_whisker_dataframe[index].quantile(0.5)),
                             int(box_whisker_dataframe[index].quantile(0.75)),
                             int(box_whisker_dataframe[index].max())]
            box_whisker_data.append(box_plot_data)

        return box_whisker_data


    def generate(self):
        """
        Loops through all the jsons generated by each json,
        then accumulates them into aggregated lists.

        Then, for each minority/political party, generate box and whisker plot data
        Write it into a json, to be stored in the /output folder.
        """
        for file in os.listdir(self.path):
            if file.endswith('.json') and file.startswith('recom_'):
                file_path = f"{self.path}/{file}"
                self.__aggregate_populations(file_path)

        box_and_whisker_plots = {'black': self.__calculate_box_data(self.agg_black_pops),
                                 'vap_black': self.__calculate_box_data(self.agg_vap_black_pops),
                                 'cvap_black': self.__calculate_box_data(self.agg_cvap_black_pops),
                                 'hispanic': self.__calculate_box_data(self.agg_hispanic_pops),
                                 'vap_hispanic': self.__calculate_box_data(self.agg_vap_hispanic_pops),
                                 'cvap_hispanic': self.__calculate_box_data(self.agg_cvap_hispanic_pops),
                                 'american_indian': self.__calculate_box_data(self.agg_american_indian_pops),
                                 'vap_american_indian': self.__calculate_box_data(self.agg_vap_american_indian_pops),
                                 'cvap_american_indian': self.__calculate_box_data(self.agg_cvap_american_indian_pops),
                                 'asian': self.__calculate_box_data(self.agg_asian_pops),
                                 'vap_asian': self.__calculate_box_data(self.agg_vap_asian_pops),
                                 'cvap_asian': self.__calculate_box_data(self.agg_cvap_asian_pops),
                                 'hawaiian': self.__calculate_box_data(self.agg_hawaiian_pops),
                                 'vap_hawaiian': self.__calculate_box_data(self.agg_vap_hawaiian_pops),
                                 'cvap_hawaiian': self.__calculate_box_data(self.agg_cvap_hawaiian_pops),
                                 'other': self.__calculate_box_data(self.agg_other_pops),
                                 'vap_other': self.__calculate_box_data(self.agg_vap_other_pops),
                                 'cvap_other': self.__calculate_box_data(self.agg_cvap_other_pops),
                                 'democrat': self.__calculate_box_data(self.agg_democrat_pops),
                                 'republican': self.__calculate_box_data(self.agg_republican_pops)}
        # for plot, values in box_and_whisker_plots.items():
        #     print(f"{plot}: {values}")
        name = "box_whisker" + "/box_whisker_data.json"
        with open(name, 'w', encoding='utf-8') as f:
            json.dump(box_and_whisker_plots, f, ensure_ascii=False, indent=1)

if __name__ == "__main__":
    box_whisker_generator = BoxWhiskerGenerator()
    box_whisker_generator.generate()
